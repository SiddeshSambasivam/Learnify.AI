LOOPS
 Chapter 8 of textbook
 More on Loops
 We have encountered loops before Now we will cover looping in more details Looping actually interferes with the 3-stage pipeline in ARM architecture This reduces the efficiency of the pipeline The reason is simple, since it involves a conditional execution of a branching instruction, it is not possible to fetch the next instruction in advance So unnecessary branching should be avoided for efficiency sake EE3002 Microprocessors
 2 Loop Example
 Lets look at a program that count the number of leading zeroes in a
 register
 The flow chart of the program is given on the right
 Start
 Shift  CNT= 0
 NUM≤0?
 No
 Shift left 1 bit
 Shift CNT +=1
 Yes
 Yes
 MSB ≠1?
 No
 End
 EE3002 Microprocessors
 3 Program
 ;r3 contains the binary value to be examined ;r4 will contain shift count at the end MOV   r4, #0    ;clear shift count CMP    r3, #0    ;is the original value <=0 BLE      finish     ;if yes, no leading zeroes loop   MOVS   r3, r3, LSL #1 ;shift left one bit ADD    r4, r4, #1  ; increment shift counter BPL  loop  ; condition code PL test  N flag clear finish EE3002 Microprocessors
 4 While Loops
 While loops evaluate the loop condition before the loop body B   Test
 Loop  …
 … ;     instructions
 Test          ;    evaluate condition BNE    Loop EE3002 Microprocessors
 5 For Loops
 Example in C language for (j=0; j<10; j++) {instructions}    In assembly MOV      r1, #0   ;j=0
 Loop  CMP      r1, #10 ;j<10?
 BGE        Done   ;if j >= 10, finish …             ;instructions ADD       r1, r1, #1   ;j++ B       Loop Done
 EE3002 Microprocessors
 6 Count down loops
 In cases when a count down loop can be used instead of a count up loop, it should be used A CMP instruction can be saved
 ALIGN
 arrayb     DCB 0xA, 0x9, 0x8, 0x7, 0x6, 0x5, 0x4, 0x3 END                                         EE3002 Microprocessors 9 Summation Example Lets look at a program that sum six 32-bit integers The flow chart of the program is given on the right
 Do… While Loops
 Structure as follows: LOOP  ; loop body ; evaluate condition BNE LOOP EXIT 
 More on Flags
 Flags are based on the results of comparisons or ALU operations if the S suffix is added Flags can be used to control loops
 Flags can also be used to control execution of instructions !!!
 Condition codes
 Field Mnemonic       Condition Code Flags                Meaning EQ                                        Z set         (Z == 1) Equal NE                                        Z clear     ( Z == 0) Not equal CS/HS                                  C set         ( C == 1) Unsigned ≥ CC/LO                                  C clear      ( C == 0) Unsigned < MI                                        N set         ( N == 1) Negative PL                                         N clear      (N == 0) Positive or zero VS                                         V set          (V == 1) Overflow VC                                        V clear       (V == 0) No overflow HI                                         C set and Z clear (C==1 && Z==0) Unsigned > LS                                         C clear or Z set   (C==0 || Z==1) Unsigned ≤ GE                                        N = V      (N==V) Signed ≥ LT                                          N ≠ V      (N !=V) Signed < GT                                        Z clear and N = V (Z==0 && N==V) Signed > LE                                         Z set or N ≠ V (Z ==1 || N !=V) Signed ≤ AL                                         Always Default EE3002 Microprocessors
 14
 Example
 Suppose that you need to compare 2 signed numbers in 2’s complement form, with 0xFF000000 in r0 and 0xFFFFFFFF in r1 If you want to branch to some code only          if the first number was less than the second, you might have something like CMP        r0, r1        ;r0<r1?
 BLT      algor
 In this case, the branch would be taken as r0 is less r1 If both numbers are UNSIGNED, then BCC should be used instead 
 Conditional Execution
 Branches should be reduced for efficiency sake Removing a branch operation will not only improve execution time but also reduces code size Conditional execution provides this capability 
 Example
 Suppose you have to test a string for the presence of either a “!” or a “?” character In C language, it can be written as if (char == ‘!’ || char == ‘?’) found++; Assume char in r0 and found in r1 TEQ     r0, #’!’     ;test if equal using EOR TEQNE r0, #’?’    ;if equal Z flag will be set ADDEQ    r1, r1, #1  ;if Z set, increment r1 
 Final Example(GCD)
 The Greatest Common Divisor algorithm by Euclid is presented as follows while (a != b) {   /* a and b positive nos */ if (a>b) a = a  b; else b = b  a;
 }    Eg a = 18, b = 6 first pass : a = 12, b = 6 second pass : a = 6, b = 6 (answer = 6) 
 Assembly Program 1
 Assume r0 contain a and r1 contain b gcd    CMP  r0, r1        ; a>b?
 BEQ    end         ; if a = b we’re done BLT    less       ; a<b branches SUB     r0, r0, r1   ; a = a-b B   gcd         ; loop again less SUB     r1, r1, r0   ;b = b a B   gcd
 Better Assembly Program
 gcd    CMP        r0, r1 SUBGT     r0, r0, r1 SUBLT r1, r1, r0
 BNE          gcd
 ; no of branches reduced from 4 to 1!!!
 Straight-line Coding
 If the number of times a loop is executed is small (<10 times), it is much more efficient to repeat the codes (straight-line coding) instead of using loops In other words, straight line coding will be much faster However the price paid is more memory used due to the increase code length 
 Sum 6 Numbers Straight-line Coding ADR      r2, arraya    ;load start of array LDR     r0, [ r2], #4           ;load first value from memory LDR     r3, [ r2], #4           ; load 2nd value from memory ADD    r0, r3, r0 LDR     r3, [r2], #4 ;load 3rd  value from memory ADD    r0, r3, r0    ; LDR     r3, [ r2], #4           ; load 4th value from memory ADD    r0, r3, r0 LDR     r3, [r2], #4 ;load 5th value from memory ADD    r0, r3, r0    ; LDR     r3, [r2], #4 ;load 6th value from memory ADD    r0, r3, r0    ; 
 Summary
 Looping in various styles    Conditional execution of instructions    Straight-line coding for speed 
 