Assembler
 Rules and
 Directives
 Chapter    of textbook
 General Form
 General form of source lines in your assembly file is {label} {instruction|directive|pseudo-instruction} {;comment} where each field in braces is optional
 When all fields are absent, it become a blank line
 Blank lines are sometimes used to make a program more readable The instructions, directives and pseudo-instructions must be preceded by a white space or tab, even in the absence of a label EE         Microprocessors
 Labels
 Labels are names chosen to represent an address somewhere in memory and they will be eventually be translated into a numeric value by the linker A label name can only defined once in your code, multiple labels of the same name is not allowed Label name cannot start with a number eg   app is not allowed Labels must start on the left
 EE         Microprocessors
 AREA Prog  ,  CODE,  READONLY ENTRY
 MOV  r  , #         ; load      into r   MOV  r  , r          ;  copy n into a temp register loop   SUBS   r  , r  , #    ; decrement next multiplier MULNE    r  , r  , r     ;perform multiply MOV       r  , r BNE          loop   ;go again if not complete stop   B         stop   ;stop program END EE         Microprocessors
 Comment lines
 The first semicolon on a line indicates the beginning of a comment A well documented assembly language is important as assembly language programs can be hard to understand Normally a well written assembly language program will have around     % comment lines Don’t state the obvious, for example in the previous slide MOV  r  , #         ; load      into r   EE         Microprocessors AREA Factorial,  CODE,  READONLY ; This program calculates the factorial of a number, n ; Factorial (n) = n(n-  )(n-  )…    ENTRY MOV    r  , #     ; r   will contain the input n =      MOV    r  , r             ; copy n into r   which also ; serves as a multiplier loop     SUBS        r  , r  , #    ; decrement next multiplier MULNE  r  , r  , r       ;perform multiply MOV       r  , r          ; save product in r   BNE             loop     ;go again if not complete stop      B           stop      ;stop program, final result in r   END EE         Microprocessors
 Constant Values
 Constants can be Expressed as Numeric Values or Character Strings -  Decimal:
 -  Hexadecimal:    x  DE   (    -bit value, zero-padded) -  General:  n_xxxx (n is base in [  ,  ], xxx is digit string) -  Character: ‘V’ (enclosed in single quote) -  String: “Hello world!n”    Control Characters Specified as in C Language    Single Quote:‘  ’ ’    Dollar Sign or Double Quote: Use Two in a row “$$” is a SINGLE Dollar Sign; “ “” “ is a single Double Quote EE         Microprocessors Predefined Register Names
 r  -r     or R  -R
 a  -a   (argument, result, or scratch registers, synonyms for r   to r  ) sp or SP (stack pointer, r    )    lr or LR (link register, r    )    pc or PC (program counter, r    )    cpsr or CPSR (current program status register)    spsr or SPSR (saved program status register) EE         Microprocessors Some Common Directives
 Directive
 AREA
 RN
 EQU
 ENTRY
 DCB
 Comment
 Defines Block of data or code Equates a Register with a name Equates a Symbol to a Numeric Constant Declares an Entry Point to a Program Allocates one or more Bytes of memory It also specifies initial runtime contents of memory
 EE         Microprocessors
 Some Common Directives
 Directive
 DCW
 DCD
 ALIGN
 SPACE
 LTORG
 END
 Comment
 Allocates one or more Halfwords (     bits) of memory  It also specifies initial runtime contents of  memory Allocates one or more Words (    bits) of memory  It also specifies initial runtime contents of memory Aligns data or code to a specific boundary
 Reserves a zeroed block of memory of a certain size
 Assigns starting point of a literal pool
 Designates end of source file EE         Microprocessors AREA-Define a Block of Data or Code     The AREA directive instructs the assembler to begin a new code or data section There must be at least one AREA directive in an assembly module Normal to use separate sections for code and data
 Large programs can be divided into several code sections Large independent data sets, such as tables, should also be placed in separate sections Syntax is
 AREA sectionname {, attr} {, attr}     Where sectionname is name of the section and any name can be chosen as long as it does not start with a numeric digit EE         Microprocessors
 Attributes for AREA
 CODE : The section contains machine instructions
 READONLY is the default
 DATA : The section contains data  READWRITE is the default READONLY: This indicates that this section should not be written to and there it can be placed in read-only memory READWRITE: This section can be read from and written to and it must therefore be placed in read-write memory EE         Microprocessors
 REGISTER NAME DEFINITION
 RN directive defines a register name for a specified register Syntax is
 name RN expr
 where name is the name to be assigned to the register  The parameter expr is a number from    to Examples
 coeff      RN      ; coefficient    dest  RN      ; register    holds the pointer to ;  destination matrix EE         Microprocessors
 EQUATE A SYMBOL TO A NUMERIC CONSTANT    The EQU directive gives a symbolic name to a numeric constant, a register-relative value, or a programrelative value Syntax : name EQU expr {,type} where parameter type is optional and can be any one of the following: CODE    , CODE    , DATA
 EE         Microprocessors
 Example
 SRAM_BASE  EQU    x                  ; assigns SRAM ; base address abc    EQU        ; assigns the value    to the ;symbol abc xyzEQU   label+    ; assigns the address ;(label+  ) to the symbol xyz fig EQU     x  C, CODE      ; assigns the                 ;absolute address   x  C to the symbol       ;fig, and marks it as code EE         Microprocessors
 ENTRY
 The ENTRY directive declares an entry point to a program You must specify at least one ENTRY point for a program If no ENTRY exists, a warning is generated at link time You must not use more than one entry directive in a single source file and not every  source file has to have an ENTRY directive EE         Microprocessors
 Allocate Memory and Specify Contents     The DCB directive allocates one or more bytes of memory and defines the initial contents of the memory The syntax is
 {label} DCB expr {,expr} … where expr is either a numeric expression that evaluates to an integer in the range of -       to        or a quoted string     Examples max_mark DCB            ; define max_mark to be        marks DCB     ,     ,     ,      ; define    bytes with values of     , ;     ,      and C_string DCB “C_string”,    ; ARM assembly strings are not null;terminated, hence a    is added behind to form a nullterminated ;string like in C language EE         Microprocessors
 DCW
 DCW directive allocates one or more halfwords of memory aligned on two byte boundaries and defines the initial contents The syntax is
 {label} DCW{U} expr {,expr} … where expr is either a numeric expression that evaluates to an integer in the range of -           to DCWU is same as DCW except that there is no memory alignment Examples
 coeff DCW   xFE    ,   x  ECC    ; defines    halfwords           DCD DCD directive allocates one or more words of memory aligned on   -byte boundaries and defines the initial contents The syntax is
 {label} DCD{U} expr {,expr} …    DCDU is same as DCD except that there is no memory alignment Examples
 data   DCD   ,   ,      ; Defines    words containing ; decimal values   ,   , and      data   DCD mem     +    ; Defines    word containing   + ; the address of label mem     ALIGN The ALIGN directive aligns the current location to a specified boundary by padding with zeros The syntax is
 ALIGN {expr {,offset}}
 where expr is a numeric expression evaluating to any power of two from      to ALIGN itself without any expr sets the current location to the next word (  -byte) boundary This is the most common usage of this directive Proper alignment can speed up the efficiency of the program in some cases                                                       SPACE The SPACE directive reserves a zeroed block of memory The syntax is
 {label} SPACE expr
 where expr evaluates to the number of zeroed bytes to reserve Example
 data   SPACE        ; defines        bytes of zeroed                  ; storage EE         Microprocessors
 END
 The END directive informs the assembler that it reached the end of a source file Every assembly language source file must terminate with END on a line by itself EE         Microprocessors Macros
 Macros allow a programmer to build definitions of functions or operations once and then call this operation by name throughout the code, saving some writing time Macros are NOT the same as subroutine call, since the macros definitions are substituted during assembly time Compare Macros with Subroutines at a later date when subroutines are covered EE         Microprocessors
 Macro definition
 MACRO
 {$label} macroname{$cond}
 {$parameter{,$parameter}…} ; code
 MEND
 where  $label is  a parameter that is substituted with a label, $cond is a special parameter which contain a condition code $parameter is substituted when the macro is invoked
 EE         Microprocessors
 Macro example (definition) MACRO
 ; macro defintion:
 ; vara =   * (varb + varc +   ) $Label_        AddMul  $vara, $varb, $varc $Label_ ADD $vara, $varb, $varc  ; add two terms ADD $vara, $vara, #         ; add    to the sum MOV $vara, $vara, LSL #       ; multiply by    MEND EE         Microprocessors
 Invoking the Macro
 The macro can be invoked as many times as you wish in the source file For eg ;invoke the macro
 CSet     AddMul      r  , r  , r      Assembler will make the necessary substitutions and your listing will become ;invoke the macro
 CSet
 ADD      r  , r  , r
 ADD      r  , r  , #
 MOV       r  , r  , LSL #
 Assembler Operators
 Primitive operations can be performed on data during assembly process A:MOD:B         A modulo B    A:ROL:B           Rotate A left by B bits    A:ROR:B           Rotate A right by B bits    A:SHL:B      Shift A left by B bits    A:SHR:B            Shift A right by B bits    A+B            Add A to B    A-B             Subtract B from A    A:AND:B          Bitwise AND of A and B    A:EOR:B           Bitwise Exclusive OR of A and B    A:OR:B       Bitwise OR of A and B Examples ORR   r  ,  r  , #  :SHL:     ;set bit    of r   ;    shifted left three times is binary             DCD    (  x        :SHL:  ):OR:   ; is equivalent to DCD   x              MOV r  , #((  :SHL:    ) :OR: (  :SHL:    )) ; is equivalent to MOV r  , #  x
 EE         Microprocessors
 Example Workings
 DCD (  x        :SHL:  ):OR:
 Hexadecimal
 Binary
 Shift left by    bits
 Or
 EE         Microprocessors
 Example Workings
 MOV r  , #((  :SHL:    ) :OR: (  :SHL:    )) (  :SHL:    ) => shifting         bits to the left In binary notation =>                                              (  :SHL:    ) =>                                          OR Hexadecimal                              EE         Microprocessors Readability
 Compare the    ways of writing
 Using binary, which bits are set?
 MOV r  ,
 #  _                                                                    Using hexadecimal MOV r  , #  x
 Using shift and OR operations MOV r  , #((  :SHL:    ) :OR: (  :SHL:    )) EE         Microprocessors Literals
 Literals are considered to be fixed values
 Two types of literals, string literals and numeric literals abc DCB “This is a string” ;string literal    Examples of numeric literals   MOV r  , #  xCF MOV r  , #’Q’
 Addr DCD   _               ; binary constant EE         Microprocessors Summary
 Learn how to document your program properly    Learn what are assembler directives    Learn how to use Macros    Learn how to use assembler operators EE         Microprocessors 